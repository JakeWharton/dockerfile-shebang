#!/usr/bin/env bash

if [ "$#" -eq 0 ]; then
  echo "Usage: #!/usr/bin/env dockerfile-shebang"
  exit 1
fi

DOCKERFILE_PATH="$1"
DOCKERFILE_NAME=$(basename "$DOCKERFILE_PATH")
shift # Remove Dockerfile from arguments

DOCKER_ARGS=""
CONTAINER_ARGS="$@"

# Look for -- as an argument. If found, send arguments before it to Docker and
# those afterward to the container.
i=1
for arg in "$@"; do
  if [[ "$arg" == "--" ]]; then
    DOCKER_ARGS="${@:1:$(($i - 1))}"
    CONTAINER_ARGS="${@:$(($i + 1))}"
    break
  fi
  i=$((i + 1))
done

# Display a message if the container needs built. Currently we have no way
# of determining this case. For now, delay echoing the message by 1 second and
# cancel it if the 'docker build' command returns quickly indicating a cached
# build (or a build which was so fast that it doesn't matter).
# TODO replace with https://github.com/moby/moby/issues/38101 once it ships.
delayed_build_message() {
  sleep 1
  if [[ "$DOCKERFILE_SHEBANG_SUPPRESS_BUILD_MESSAGE" != "true" ]]; then
    echo "Building $DOCKERFILE_NAME..."
    echo
  fi
}

delayed_build_message &
MESSAGE_PID=$!
disown $MESSAGE_PID # Avoid output when we kill this job.

kill_delayed_message() {
  # Ensure this cannot fail and kill the enclosing script.
  kill $MESSAGE_PID > /dev/null 2>&1 || true
}
trap kill_delayed_message EXIT

BUILD_OUTPUT=$(docker build --label "dockerfile-shebang=true" -t "$DOCKERFILE_NAME" - 2>&1 < "$DOCKERFILE_PATH")
BUILD_EXIT=$?

kill_delayed_message

if [ $BUILD_EXIT -ne 0 ]; then
  # Display the build output, ignoring the first line about the context.
  echo "$BUILD_OUTPUT" | tail -n +2
  exit $BUILD_EXIT
fi

exec docker run --rm --name "$DOCKERFILE_NAME" $DOCKER_ARGS "$DOCKERFILE_NAME" $CONTAINER_ARGS
